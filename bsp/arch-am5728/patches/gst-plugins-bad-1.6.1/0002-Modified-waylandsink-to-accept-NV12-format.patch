From 4aba7f1afbd6c364e649f4c0e539c9a93d59bce6 Mon Sep 17 00:00:00 2001
From: Pooja Prajod <a0132412-l0cyMroinI0 <at> public.gmane.org>
Date: Fri, 12 Dec 2014 12:57:22 +0530
Subject: [PATCH] Modified waylandsink to accept NV12 format

Wayland sink now accepts NV12 format buffers. A support function gst_wl_buffer_priv
has been added to check if it is a buffer with GstMetaDmabuf metadata set and
create a wl_buffer. A hashtable is also maintained with GstMetaDmabuf fd as key
---
 configure.ac                 |    6 +-
 ext/wayland/Makefile.am      |   11 +-
 ext/wayland/gstwaylandsink.c |  203 +++++++++++++++++--
 ext/wayland/gstwaylandsink.h |   18 ++
 .../ext/wayland/gstwlbufferpriv.c                  |  156 ++++++++++++++
 .../ext/wayland/gstwlbufferpriv.h                  |   56 +++++
 .../ext/wayland/wayland-drm-client-protocol.h      |  213 ++++++++++++++++++++
 .../ext/wayland/wayland-drm-protocol.c             |   74 +++++++
 8 files changed, 717 insertions(+), 20 deletions(-)
 create mode 100644 ext/wayland/gstwlbufferpriv.c
 create mode 100644 ext/wayland/gstwlbufferpriv.h
 create mode 100644 ext/wayland/wayland-drm-client-protocol.h
 create mode 100644 ext/wayland/wayland-drm-protocol.c

diff --git gst-plugins-bad-1.6.1.orig/src/configure.ac gst-plugins-bad-1.6.1/src/configure.ac
--- gst-plugins-bad-1.6.1.orig/src/configure.ac
+++ gst-plugins-bad-1.6.1/src/configure.ac
@@ -1931,8 +1931,10 @@ 
 dnl **** Wayland ****
 translit(dnm, m, l) AM_CONDITIONAL(USE_WAYLAND, true)
 AG_GST_CHECK_FEATURE(WAYLAND, [wayland sink], wayland , [
-  PKG_CHECK_MODULES(WAYLAND, wayland-client >= 1.4.0 wayland-scanner, [
-    HAVE_WAYLAND="yes" ], [ HAVE_WAYLAND="no"
+  PKG_CHECK_MODULES(WAYLAND, wayland-client >= 1.4.0 wayland-scanner libdrm libdrm_omap, [
+     AC_SUBST(DRM_CFLAGS)
+     AC_SUBST(DRM_LIBS)
+     HAVE_WAYLAND="yes" ], [ HAVE_WAYLAND="no"
   ])
 ])
 
Index: gst-plugins-bad-1.6.1/src/ext/wayland/Makefile.am
===================================================================
--- gst-plugins-bad-1.6.1.orig/src/ext/wayland/Makefile.am	2016-03-29 15:12:00.976474021 -0600
+++ gst-plugins-bad-1.6.1/src/ext/wayland/Makefile.am	2016-03-29 15:20:35.424483520 -0600
@@ -7,14 +7,19 @@
 	wldisplay.c \
 	wlwindow.c \
 	wlvideoformat.c \
-	scaler-protocol.c
+	scaler-protocol.c \
+	gstwlbufferpriv.c \
+	wayland-drm-protocol.c
 
 libgstwaylandsink_la_CFLAGS = $(GST_CFLAGS) $(GST_PLUGINS_BASE_CFLAGS) \
-                               $(WAYLAND_CFLAGS) $(GST_PLUGINS_BAD_CFLAGS)
+                               $(WAYLAND_CFLAGS) $(GST_PLUGINS_BAD_CFLAGS) \
+                               $(DRM_CFLAGS)
 libgstwaylandsink_la_LIBADD = \
 	$(GST_PLUGINS_BASE_LIBS) \
 	-lgstvideo-$(GST_API_VERSION) \
 	$(WAYLAND_LIBS) \
+	-lgstdmabuf-$(GST_API_VERSION) \
+	$(top_builddir)/gst-libs/gst/drm/libgstdrm-$(GST_API_VERSION).la \
 	$(top_builddir)/gst-libs/gst/wayland/libgstwayland-$(GST_API_VERSION).la
 libgstwaylandsink_la_LDFLAGS = $(GST_PLUGIN_LDFLAGS)
 libgstwaylandsink_la_LIBTOOLFLAGS = $(GST_PLUGIN_LIBTOOLFLAGS)
@@ -26,7 +31,9 @@
 	wldisplay.h \
 	wlwindow.h \
 	wlvideoformat.h \
-	scaler-client-protocol.h
+	scaler-client-protocol.h \
+	gstwlbufferpriv.h \
+	wayland-drm-client-protocol.h
 
 EXTRA_DIST = scaler.xml
 CLEANFILES = scaler-protocol.c scaler-client-protocol.h
diff --git gst-plugins-bad-1.6.1.orig/src/ext/wayland/gstwaylandsink.c gst-plugins-bad-1.6.1/src/ext/wayland/gstwaylandsink.c
--- gst-plugins-bad-1.6.1.orig/src/ext/wayland/gstwaylandsink.c
+++ gst-plugins-bad-1.6.1/src/ext/wayland/gstwaylandsink.c
@@ -42,6 +42,13 @@
 #endif
 
 #include "gstwaylandsink.h"
+#include "gstwlbufferpriv.h"
+
+#include <wayland-client-protocol.h>
+#include "wayland-drm-client-protocol.h"
+
+#include <linux/input.h>
+
 #include "wlvideoformat.h"
 #include "wlbuffer.h"
 #include "wlshmallocator.h"
@@-181,6 +188,15 @@ 
 gst_wayland_sink_class_init (GstWaylandSinkClass * klass)
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 }
 
+/* Free function for key destruction for the hashtable we are using*/ 
+static void
+wlbufferpriv_free_func (GstWLBufferPriv *priv)
+{
+  wl_buffer_destroy (priv->buffer);
+  omap_bo_del (priv->bo);
+  g_free(priv);
+}
+
 static void
 gst_wayland_sink_init (GstWaylandSink * sink)
 {
@@ -188,7 +204,10 @@ 
 gst_wayland_sink_init (GstWaylandSink * sink)
   sink->window = NULL;
   sink->shm_pool = NULL;
   sink->pool = NULL;
-
+  sink->drm_pool = NULL;
+  /* Initialising the hastable for storing map between dmabuf fd and GstWLBufferPriv */
+  sink->wlbufferpriv = g_hash_table_new_full (g_direct_hash, g_direct_equal,
+      NULL, (GDestroyNotify) wlbufferpriv_free_func);
   g_mutex_init (&sink->wayland_lock);
 }
 
@@ -230,6 +249,9 @@ 
 destroy_display (struct display *display)
   if (display->shm)
     wl_shm_destroy (display->shm);
 
+  if (display->drm)
+    wl_drm_destroy (display->drm);
+
   if (display->shell)
     wl_shell_destroy (display->shell);
 
@@ -280,6 +302,14 @@ 
 gst_wayland_sink_finalize (GObject * object)
     destroy_display (sink->display);
   if (sink->shm_pool)
     shm_pool_destroy (sink->shm_pool);
+  if (sink->drm_pool) {
+    gst_drm_buffer_pool_destroy (sink->drm_pool);
+    sink->drm_pool = NULL;
+  }
+  if (sink->wlbufferpriv){
+    g_hash_table_destroy (sink->wlbufferpriv);
+    sink->wlbufferpriv = NULL;
+  }
 
   g_mutex_clear (&sink->wayland_lock);
 
@@ -318,6 +348,56 @@ 
 struct wl_shm_listener shm_listenter = {
   shm_format
 };
 
+/* For wl_drm_listener */
+static void
+drm_handle_device (void *data, struct wl_drm *drm, const char *device)
+{
+  struct display *d = data;
+  drm_magic_t magic;
+
+  d->fd = open (device, O_RDWR | O_CLOEXEC);
+  if (d->fd == -1) {
+    GST_ERROR ("could not open %s: %m", device);
+    // XXX hmm, probably need to throw up some error now??
+    return;
+  }
+
+  drmGetMagic (d->fd, &magic);
+  wl_drm_authenticate (d->drm, magic);
+}
+
+
+static void
+drm_handle_format (void *data, struct wl_drm *drm, uint32_t format)
+{
+  struct display *d = data;
+  GST_DEBUG ("got format: %" GST_FOURCC_FORMAT, GST_FOURCC_ARGS (format));
+  if (d->drm_format_count < 50) {
+    d->drm_formats[d->drm_format_count++] = format;
+  } else {
+    GST_WARNING ("drm_handle_formats (no room for more formats): %" 
+                GST_FOURCC_FORMAT, GST_FOURCC_ARGS (format));
+  }
+}
+
+static void
+drm_handle_authenticated (void *data, struct wl_drm *drm)
+{
+  struct display *d = data;
+  GST_DEBUG ("authenticated");
+  d->dev = omap_device_new (d->fd);
+  d->authenticated = 1;
+  GST_DEBUG("drm_handle_authenticated: dev: %p, d->authenticated: %d\n", d->dev, d->authenticated);
+}
+
+static const struct wl_drm_listener drm_listener = {
+  drm_handle_device,
+  drm_handle_format,
+  drm_handle_authenticated
+};
+
+
+
 static void
 registry_handle_global (void *data, struct wl_registry *registry,
     uint32_t id, const char *interface, uint32_t version)
@@ -332,6 +412,9 @@ 
 registry_handle_global (void *data, struct wl_registry *registry,
   } else if (strcmp (interface, "wl_shm") == 0) {
     d->shm = wl_registry_bind (registry, id, &wl_shm_interface, 1);
     wl_shm_add_listener (d->shm, &shm_listenter, d);
+  } else if (strcmp (interface, "wl_drm") == 0) {
+    d->drm = wl_registry_bind (registry, id, &wl_drm_interface, 1);
+    wl_drm_add_listener (d->drm, &drm_listener, d);
   }
 }

@@ -351,13 +434,14 @@ 
 create_display (void)
     free (display);
     return NULL;
   }
+  display->authenticated = 0;
 
   display->registry = wl_display_get_registry (display->display);
   wl_registry_add_listener (display->registry, &registry_listener, display);
 
   wl_display_roundtrip (display->display);
-  if (display->shm == NULL) {
-    GST_ERROR ("No wl_shm global..");
+  if (display->shm == NULL && display->drm == NULL) {
+    GST_ERROR ("No wl_shm global and wl_drm global..");
     return NULL;
   }
 
@@ -384,6 +468,61 @@ 
 gst_wayland_sink_format_from_caps (uint32_t * wl_format, GstCaps * caps)
   return (*wl_format != -1);
 }
 
+static void
+wait_authentication (GstWaylandSink * sink)
+{
+  GST_DEBUG_OBJECT (sink, "Before wait aunthenticated value is %d : \n", sink->display->authenticated );
+  while (!sink->display->authenticated) {
+    GST_DEBUG_OBJECT (sink, "waiting for authentication");
+    wl_display_roundtrip (sink->display->display);
+  }
+  GST_DEBUG_OBJECT (sink, "After wait aunthenticated value is %d : \n", sink->display->authenticated );
+}
+
+/* create a drm buffer pool if the video format is NV12 */
+static gboolean
+create_pool (GstWaylandSink * sink, GstCaps * caps)
+{
+
+  GstVideoInfo info;
+
+  wait_authentication (sink);
+
+  while (!sink->display->authenticated) {
+    GST_DEBUG_OBJECT (sink, "not authenticated yet");
+  }
+
+  if (!gst_video_info_from_caps (&info, caps))
+    goto invalid_format;
+
+  
+
+  if (sink->drm_pool) {
+    GST_INFO_OBJECT (sink, "recreating pool");
+    gst_drm_buffer_pool_destroy (sink->drm_pool);
+    sink->drm_pool = NULL;
+  }
+
+  sink->video_width = info.width;
+  sink->video_height = info.height;
+
+  sink->drm_pool = gst_drm_buffer_pool_new (GST_ELEMENT (sink),
+      sink->display->fd, caps, info.size);
+  if(sink->drm_pool){
+    return TRUE;
+   }
+  else {
+    return FALSE;
+   }
+
+invalid_format:
+  {
+    GST_DEBUG_OBJECT (sink,
+        "Could not locate image format from caps %" GST_PTR_FORMAT, caps);
+    return FALSE;
+  }
+}
+
 static gboolean
 gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
 {
@@ -393,6 +532,7 @@ 
 gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
   GstStructure *structure;
   static GstAllocationParams params = { 0, 0, 0, 15, };
   guint size;
+ GstVideoFormat fmt;
 
   sink = GST_WAYLAND_SINK (bsink);
 
@@ -401,15 +541,23 @@ 
 gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
   if (!gst_video_info_from_caps (&info, caps))
     goto invalid_format;
 
+  fmt = GST_VIDEO_INFO_FORMAT(&info);
+  if (fmt == GST_VIDEO_FORMAT_NV12 ||  fmt == GST_VIDEO_FORMAT_I420 || fmt == GST_VIDEO_FORMAT_YUY2 || fmt == GST_VIDEO_FORMAT_UYVY){
+    create_pool(sink, caps);
+    return TRUE;
+  } 
+
   if (!gst_wayland_sink_format_from_caps (&sink->format, caps))
     goto invalid_format;
 
+
  if (!(sink->display->formats & (1 << sink->format))) {
     GST_DEBUG_OBJECT (sink, "%s not available",
         gst_wayland_format_to_string (sink->format));
     return FALSE;
   }
 
+
   sink->video_width = info.width;
   sink->video_height = info.height;
   size = info.size;
@@ -417,6 +565,7 @@ 
 gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
   /* create a new pool for the new configuration */
   newpool = gst_wayland_buffer_pool_new (sink);
 
+
   if (!newpool) {
     GST_DEBUG_OBJECT (sink, "Failed to create new pool");
     return FALSE;
@@ -532,6 +681,7 @@ 
 gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query)
 {
   GstWaylandSink *sink = GST_WAYLAND_SINK (bsink);
   GstBufferPool *pool;
+  GstDRMBufferPool *drm_pool;
   GstStructure *config;
   GstCaps *caps;
   guint size;
@@ -562,6 +712,7 @@ 
 gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query)
     gst_structure_free (config);
   }
 
+
   if (pool == NULL && need_pool) {
     GstVideoInfo info;
 
@@ -583,7 +734,6 @@ 
 gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query)
     gst_query_add_allocation_pool (query, pool, size, 2, 0);
     gst_object_unref (pool);
   }
-
   return TRUE;
 
   /* ERRORS */
@@ -624,35 +774,54 @@ 
 static const struct wl_callback_listener frame_callback_listener = {
   frame_redraw_callback
 };
 
+
 static GstFlowReturn
 gst_wayland_sink_render (GstBaseSink * bsink, GstBuffer * buffer)
 {
   GstWaylandSink *sink = GST_WAYLAND_SINK (bsink);
   GstVideoRectangle src, dst, res;
-  GstBuffer *to_render;
+  GstBuffer *to_render = NULL;
   GstWlMeta *meta;
   GstFlowReturn ret;
   struct window *window;
   struct display *display;
-
+  GstWLBufferPriv *priv;
+  GstMapInfo mapsrc;
+  
   GST_LOG_OBJECT (sink, "render buffer %p", buffer);
-  if (!sink->window)
-    create_window (sink, sink->display, sink->video_width, sink->video_height);
+  if (!sink->window){
+    gint video_width = sink->video_width;
+    gint video_height = sink->video_height;
+    GstVideoCropMeta* crop = gst_buffer_get_video_crop_meta (buffer);
+    if(crop){
+       if (crop->width) {
+         video_width = crop->width;
+       } 
+      if (crop->height) {  
+         video_height = crop->height;
+       }
+    }
+    create_window (sink, sink->display, video_width, video_height);
+   }
 
   window = sink->window;
   display = sink->display;
 
   meta = gst_buffer_get_wl_meta (buffer);
+  priv = gst_wl_buffer_priv (sink, buffer);
 
   if (window->redraw_pending) {
     wl_display_dispatch (display->display);
   }
 
+  
   if (meta && meta->sink == sink) {
     GST_LOG_OBJECT (sink, "buffer %p from our pool, writing directly", buffer);
     to_render = buffer;
+  } else if(priv) {
+    to_render = buffer;
+    GST_LOG_OBJECT (sink, " priv buffer %p from drm pool, writing directly", buffer);
   } else {
-    GstMapInfo src;
     GST_LOG_OBJECT (sink, "buffer %p not from our pool, copying", buffer);
 
     if (!sink->pool)
@@ -665,9 +834,9 @@ 
 gst_wayland_sink_render (GstBaseSink * bsink, GstBuffer * buffer)
     if (ret != GST_FLOW_OK)
       goto no_buffer;
 
-    gst_buffer_map (buffer, &src, GST_MAP_READ);
-    gst_buffer_fill (to_render, 0, src.data, src.size);
-    gst_buffer_unmap (buffer, &src);
+    gst_buffer_map (buffer, &mapsrc, GST_MAP_READ);
+    gst_buffer_fill (to_render, 0, mapsrc.data, mapsrc.size);
+    gst_buffer_unmap (buffer, &mapsrc);
 
     meta = gst_buffer_get_wl_meta (to_render);
   }
@@ -679,7 +848,13 @@ 
 gst_wayland_sink_render (GstBaseSink * bsink, GstBuffer * buffer)
 
   gst_video_sink_center_rect (src, dst, &res, FALSE);
 
+  /* display the buffer stored in priv, if the buffer obtained returns a priv */
+  if(priv){
+   wl_surface_attach (sink->window->surface, priv->buffer, res.x, res.y);
+  } else {
   wl_surface_attach (sink->window->surface, meta->wbuffer, 0, 0);
+  }
+  
   wl_surface_damage (sink->window->surface, 0, 0, res.w, res.h);
   window->redraw_pending = TRUE;
   window->callback = wl_surface_frame (window->surface);
Index: gst-plugins-bad-1.6.1/src/ext/wayland/gstwaylandsink.h
===================================================================
--- gst-plugins-bad-1.6.1.orig/src/ext/wayland/gstwaylandsink.h	2015-10-22 02:04:08.000000000 -0600
+++ gst-plugins-bad-1.6.1/src/ext/wayland/gstwaylandsink.h	2016-03-29 15:52:13.968518578 -0600
@@ -25,6 +25,8 @@
 #include <gst/gst.h>
 #include <gst/video/video.h>
 
+#include <gst/drm/gstdrmbufferpool.h>
+
 #include <wayland-client.h>
 
 #include "wldisplay.h"
@@ -57,6 +59,10 @@
   GstWlWindow *window;
   GstBufferPool *pool;
 
+  /* for NV12 buffers on wl_drm_buffer */
+  GstDRMBufferPool *drm_pool;
+  GHashTable *wlbufferpriv;
+
   gboolean video_info_changed;
   GstVideoInfo video_info;
 

diff --git gst-plugins-bad-1.6.1.orig/src/ext/wayland/gstwlbufferpriv.c gst-plugins-bad-1.6.1/src/ext/wayland/gstwlbufferpriv.c
new file mode 100644
--- /dev/null
+++ gst-plugins-bad-1.6.1/src/ext/wayland/gstwlbufferpriv.c
@@ -0,0 +1,156 @@
+/*
+ * GStreamer
+ *
+ * Copyright (C) 2012 Texas Instruments
+ * Copyright (C) 2012 Collabora Ltd
+ *
+ * Authors:
+ *  Alessandro Decina <alessandro.decina-ZGY8ohtN/8pPYcu2f3hruQ <at> public.gmane.org>
+ *  Rob Clark <rob.clark-QSEj5FYQhm4dnm+yROfE0A <at> public.gmane.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <stdint.h>
+#include <gst/gst.h>
+#include <gst/dmabuf/dmabuf.h>
+#include <gst/video/gstvideometa.h>
+
+#include <omap_drm.h>
+#include <omap_drmif.h>
+
+#include "gstwaylandsink.h"
+#include "gstwlbufferpriv.h"
+#include "wayland-drm-client-protocol.h"
+
+
+/* Create planar wl_buffer that can be given to waylandsink.
+ * Crop info is also used */
+static int
+create_wl_buffer (GstWLBufferPriv * priv, GstWaylandSink * sink,
+    GstBuffer * buf)
+{
+  GstVideoCropMeta *crop;
+  gint video_width = sink->video_width;
+  gint video_height = sink->video_height;
+
+  /* TODO get format, etc from caps.. and query device for
+   * supported formats, and make this all more flexible to
+   * cope with various formats:
+   */
+  uint32_t fourcc = GST_MAKE_FOURCC ('N', 'V', '1', '2');
+  uint32_t name;
+
+  /* note: wayland and mesa use the terminology:
+   *    stride - rowstride in bytes
+   *    pitch  - rowstride in pixels
+   */
+  uint32_t strides[3] = {
+    GST_ROUND_UP_4 (sink->video_width), GST_ROUND_UP_4 (sink->video_width), 0,
+  };
+  uint32_t offsets[3] = {
+    0, strides[0] * sink->video_height, 0
+  };
+
+  crop = gst_buffer_get_video_crop_meta (buf);
+  if (crop) {
+    guint left, top;
+    left = crop->y;
+    top = crop->x;
+
+    offsets[0] = left;
+    offsets[1] += (video_width * top / 2) + left;
+    if(crop->width)
+     video_width = crop->width;
+  }
+
+  if (omap_bo_get_name (priv->bo, &name)) {
+    GST_WARNING_OBJECT (sink, "could not get name");
+    return -1;
+  }
+
+ GST_LOG_OBJECT (sink,"width = %d , height = %d , fourcc = %d ",  video_width, video_height, fourcc );
+
+  priv->buffer = wl_drm_create_planar_buffer (sink->display->drm, name,
+      video_width, video_height, fourcc,
+      offsets[0], strides[0],
+      offsets[1], strides[1],
+      offsets[2], strides[2]);
+
+  GST_DEBUG_OBJECT (sink, "create planar buffer: %p (name=%d)",
+      priv->buffer, name);
+
+  return priv->buffer ? 0 : -1;
+}
+
+
+/**
+ * gst_wl_buffer_priv:
+ *  <at> sink: a #GstWaylandSink
+ *  <at> buf: a pointer to #GstBuffer
+ *
+ * Checks if the  <at> buf has a GstMetaDmaBuf metadata set. If it doesn't we return a NULL
+ * indicating its not a dmabuf buffer. We maintain a hashtable with dmabuf fd as key and 
+ * the GstWLBufferPriv structure as value
+ *
+ * Returns: the #GstWLBufferPriv
+ *
+ * Since: 1.2.?
+ */
+GstWLBufferPriv *
+gst_wl_buffer_priv (GstWaylandSink * sink, GstBuffer * buf)
+{
+  
+    GstMetaDmaBuf *dmabuf = gst_buffer_get_dma_buf_meta (buf);
+    GstWLBufferPriv *priv;
+    int fd,fd_copy;
+
+    /* if it isn't a dmabuf buffer that we can import, then there
+     * is nothing we can do with it:
+     */
+    if (!dmabuf) {
+      GST_DEBUG_OBJECT (sink, "not importing non dmabuf buffer");
+      return NULL;
+    }
+    fd = gst_dma_buf_meta_get_fd (dmabuf);
+    fd_copy =fd;
+
+     /* lookup the hashtable with fd as key. If present return bo & buffer structure */
+    priv = g_hash_table_lookup (sink->wlbufferpriv, (gpointer)fd_copy);
+    if(priv) {
+       return priv;
+     }
+
+    priv = g_malloc0 (sizeof (GstWLBufferPriv));
+    priv->bo = omap_bo_from_dmabuf (sink->display->dev, fd);
+
+    if (create_wl_buffer (priv, sink, buf)) {
+      GST_WARNING_OBJECT (sink, "could not create framebuffer: %s",
+          strerror (errno));
+      g_free(priv);
+      return NULL;
+    }
+
+    /* if fd not present, write to hash table fd and the corresponding priv. */
+    g_hash_table_insert(sink->wlbufferpriv, (gpointer)fd_copy, priv);    
+    
+   
+  return priv;
+}
+
diff --git gst-plugins-bad-1.6.1.orig/src/ext/wayland/gstwlbufferpriv.h gst-plugins-bad-1.6.1/src/ext/wayland/gstwlbufferpriv.h
new file mode 100644
--- /dev/null
+++ gst-plugins-bad-1.6.1/src/ext/wayland/gstwlbufferpriv.h
@@ -0,0 +1,56 @@
+/*
+ * GStreamer
+ *
+ * Copyright (C) 2012 Texas Instruments
+ * Copyright (C) 2012 Collabora Ltd
+ *
+ * Authors:
+ *  Alessandro Decina <alessandro.decina-ZGY8ohtN/8pPYcu2f3hruQ <at> public.gmane.org>
+ *  Rob Clark <rob.clark-QSEj5FYQhm4dnm+yROfE0A <at> public.gmane.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#ifndef __GSTWLBUFFERPRIV_H__
+#define __GSTWLBUFFERPRIV_H__
+
+#include <stdint.h>
+#include <gst/gst.h>
+
+#include <omap_drm.h>
+#include <omap_drmif.h>
+
+#include <wayland-client.h>
+
+G_BEGIN_DECLS
+
+
+typedef struct
+{
+  struct omap_bo *bo;
+  struct wl_buffer *buffer;
+
+}GstWLBufferPriv;
+
+
+GType gst_wl_buffer_priv_get_type (void);
+
+/* Returns a GstWLBufferPriv, if it has a dmabuf fd meatadata */
+GstWLBufferPriv * gst_wl_buffer_priv (GstWaylandSink *sink, GstBuffer * buf);
+
+G_END_DECLS
+
+
+#endif /* __GSTWLBUFFERPRIV_H__ */
diff --git gst-plugins-bad-1.6.1.orig/src/ext/wayland/wayland-drm-client-protocol.h gst-plugins-bad-1.6.1/src/ext/wayland/wayland-drm-client-protocol.h
new file mode 100644
--- /dev/null
+++ gst-plugins-bad-1.6.1/src/ext/wayland/wayland-drm-client-protocol.h
@@ -0,0 +1,213 @@
+/* 
+ * Copyright Â© 2008-2011 Kristian HÃ¸gsberg
+ * Copyright Â© 2010-2011 Intel Corporation
+ * 
+ * Permission to use, copy, modify, distribute, and sell this
+ * software and its documentation for any purpose is hereby granted
+ * without fee, provided that\n the above copyright notice appear in
+ * all copies and that both that copyright notice and this permission
+ * notice appear in supporting documentation, and that the name of
+ * the copyright holders not be used in advertising or publicity
+ * pertaining to distribution of the software without specific,
+ * written prior permission.  The copyright holders make no
+ * representations about the suitability of this software for any
+ * purpose.  It is provided "as is" without express or implied
+ * warranty.
+ * 
+ * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
+ * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
+ * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
+ * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
+ * THIS SOFTWARE.
+ */
+
+#ifndef DRM_CLIENT_PROTOCOL_H
+#define DRM_CLIENT_PROTOCOL_H
+
+#ifdef  __cplusplus
+extern "C" {
+#endif
+
+#include <stdint.h>
+#include <stddef.h>
+#include "wayland-util.h"
+
+struct wl_client;
+struct wl_resource;
+
+struct wl_drm;
+
+extern const struct wl_interface wl_drm_interface;
+
+#ifndef WL_DRM_ERROR_ENUM
+#define WL_DRM_ERROR_ENUM
+enum wl_drm_error {
+	WL_DRM_ERROR_AUTHENTICATE_FAIL = 0,
+	WL_DRM_ERROR_INVALID_FORMAT = 1,
+	WL_DRM_ERROR_INVALID_NAME = 2,
+};
+#endif /* WL_DRM_ERROR_ENUM */
+
+#ifndef WL_DRM_FORMAT_ENUM
+#define WL_DRM_FORMAT_ENUM
+enum wl_drm_format {
+	WL_DRM_FORMAT_C8 = 0x20203843,
+	WL_DRM_FORMAT_RGB332 = 0x38424752,
+	WL_DRM_FORMAT_BGR233 = 0x38524742,
+	WL_DRM_FORMAT_XRGB4444 = 0x32315258,
+	WL_DRM_FORMAT_XBGR4444 = 0x32314258,
+	WL_DRM_FORMAT_RGBX4444 = 0x32315852,
+	WL_DRM_FORMAT_BGRX4444 = 0x32315842,
+	WL_DRM_FORMAT_ARGB4444 = 0x32315241,
+	WL_DRM_FORMAT_ABGR4444 = 0x32314241,
+	WL_DRM_FORMAT_RGBA4444 = 0x32314152,
+	WL_DRM_FORMAT_BGRA4444 = 0x32314142,
+	WL_DRM_FORMAT_XRGB1555 = 0x35315258,
+	WL_DRM_FORMAT_XBGR1555 = 0x35314258,
+	WL_DRM_FORMAT_RGBX5551 = 0x35315852,
+	WL_DRM_FORMAT_BGRX5551 = 0x35315842,
+	WL_DRM_FORMAT_ARGB1555 = 0x35315241,
+	WL_DRM_FORMAT_ABGR1555 = 0x35314241,
+	WL_DRM_FORMAT_RGBA5551 = 0x35314152,
+	WL_DRM_FORMAT_BGRA5551 = 0x35314142,
+	WL_DRM_FORMAT_RGB565 = 0x36314752,
+	WL_DRM_FORMAT_BGR565 = 0x36314742,
+	WL_DRM_FORMAT_RGB888 = 0x34324752,
+	WL_DRM_FORMAT_BGR888 = 0x34324742,
+	WL_DRM_FORMAT_XRGB8888 = 0x34325258,
+	WL_DRM_FORMAT_XBGR8888 = 0x34324258,
+	WL_DRM_FORMAT_RGBX8888 = 0x34325852,
+	WL_DRM_FORMAT_BGRX8888 = 0x34325842,
+	WL_DRM_FORMAT_ARGB8888 = 0x34325241,
+	WL_DRM_FORMAT_ABGR8888 = 0x34324241,
+	WL_DRM_FORMAT_RGBA8888 = 0x34324152,
+	WL_DRM_FORMAT_BGRA8888 = 0x34324142,
+	WL_DRM_FORMAT_XRGB2101010 = 0x30335258,
+	WL_DRM_FORMAT_XBGR2101010 = 0x30334258,
+	WL_DRM_FORMAT_RGBX1010102 = 0x30335852,
+	WL_DRM_FORMAT_BGRX1010102 = 0x30335842,
+	WL_DRM_FORMAT_ARGB2101010 = 0x30335241,
+	WL_DRM_FORMAT_ABGR2101010 = 0x30334241,
+	WL_DRM_FORMAT_RGBA1010102 = 0x30334152,
+	WL_DRM_FORMAT_BGRA1010102 = 0x30334142,
+	WL_DRM_FORMAT_YUYV = 0x56595559,
+	WL_DRM_FORMAT_YVYU = 0x55595659,
+	WL_DRM_FORMAT_UYVY = 0x59565955,
+	WL_DRM_FORMAT_VYUY = 0x59555956,
+	WL_DRM_FORMAT_AYUV = 0x56555941,
+	WL_DRM_FORMAT_NV12 = 0x3231564e,
+	WL_DRM_FORMAT_NV21 = 0x3132564e,
+	WL_DRM_FORMAT_NV16 = 0x3631564e,
+	WL_DRM_FORMAT_NV61 = 0x3136564e,
+	WL_DRM_FORMAT_YUV410 = 0x39565559,
+	WL_DRM_FORMAT_YVU410 = 0x39555659,
+	WL_DRM_FORMAT_YUV411 = 0x31315559,
+	WL_DRM_FORMAT_YVU411 = 0x31315659,
+	WL_DRM_FORMAT_YUV420 = 0x32315559,
+	WL_DRM_FORMAT_YVU420 = 0x32315659,
+	WL_DRM_FORMAT_YUV422 = 0x36315559,
+	WL_DRM_FORMAT_YVU422 = 0x36315659,
+	WL_DRM_FORMAT_YUV444 = 0x34325559,
+	WL_DRM_FORMAT_YVU444 = 0x34325659,
+};
+#endif /* WL_DRM_FORMAT_ENUM */
+
+struct wl_drm_listener {
+	/**
+	 * device - (none)
+	 *  <at> name: (none)
+	 */
+	void (*device)(void *data,
+		       struct wl_drm *wl_drm,
+		       const char *name);
+	/**
+	 * format - (none)
+	 *  <at> format: (none)
+	 */
+	void (*format)(void *data,
+		       struct wl_drm *wl_drm,
+		       uint32_t format);
+	/**
+	 * authenticated - (none)
+	 */
+	void (*authenticated)(void *data,
+			      struct wl_drm *wl_drm);
+};
+
+static inline int
+wl_drm_add_listener(struct wl_drm *wl_drm,
+		    const struct wl_drm_listener *listener, void *data)
+{
+	return wl_proxy_add_listener((struct wl_proxy *) wl_drm,
+				     (void (**)(void)) listener, data);
+}
+
+#define WL_DRM_AUTHENTICATE	0
+#define WL_DRM_CREATE_BUFFER	1
+#define WL_DRM_CREATE_PLANAR_BUFFER	2
+
+static inline void
+wl_drm_set_user_data(struct wl_drm *wl_drm, void *user_data)
+{
+	wl_proxy_set_user_data((struct wl_proxy *) wl_drm, user_data);
+}
+
+static inline void *
+wl_drm_get_user_data(struct wl_drm *wl_drm)
+{
+	return wl_proxy_get_user_data((struct wl_proxy *) wl_drm);
+}
+
+static inline void
+wl_drm_destroy(struct wl_drm *wl_drm)
+{
+	wl_proxy_destroy((struct wl_proxy *) wl_drm);
+}
+
+static inline void
+wl_drm_authenticate(struct wl_drm *wl_drm, uint32_t id)
+{
+	wl_proxy_marshal((struct wl_proxy *) wl_drm,
+			 WL_DRM_AUTHENTICATE, id);
+}
+
+static inline struct wl_buffer *
+wl_drm_create_buffer(struct wl_drm *wl_drm, uint32_t name, int32_t width, int32_t height, uint32_t stride, uint32_t format)
+{
+	struct wl_proxy *id;
+
+	id = wl_proxy_create((struct wl_proxy *) wl_drm,
+			     &wl_buffer_interface);
+	if (!id)
+		return NULL;
+
+	wl_proxy_marshal((struct wl_proxy *) wl_drm,
+			 WL_DRM_CREATE_BUFFER, id, name, width, height, stride, format);
+
+	return (struct wl_buffer *) id;
+}
+
+static inline struct wl_buffer *
+wl_drm_create_planar_buffer(struct wl_drm *wl_drm, uint32_t name, int32_t width, int32_t height, uint32_t format, int32_t offset0, int32_t stride0, int32_t offset1, int32_t stride1, int32_t offset2, int32_t stride2)
+{
+	struct wl_proxy *id;
+
+	id = wl_proxy_create((struct wl_proxy *) wl_drm,
+			     &wl_buffer_interface);
+	if (!id)
+		return NULL;
+
+	wl_proxy_marshal((struct wl_proxy *) wl_drm,
+			 WL_DRM_CREATE_PLANAR_BUFFER, id, name, width, height, format, offset0, stride0, offset1, stride1, offset2, stride2);
+
+	return (struct wl_buffer *) id;
+}
+
+#ifdef  __cplusplus
+}
+#endif
+
+#endif
diff --git gst-plugins-bad-1.6.1.orig/src/ext/wayland/wayland-drm-protocol.c gst-plugins-bad-1.6.1/src/ext/wayland/wayland-drm-protocol.c
new file mode 100644
--- /dev/null
+++ gst-plugins-bad-1.6.1/src/ext/wayland/wayland-drm-protocol.c
@@ -0,0 +1,74 @@
+/* 
+ * Copyright Â© 2008-2011 Kristian HÃ¸gsberg
+ * Copyright Â© 2010-2011 Intel Corporation
+ * 
+ * Permission to use, copy, modify, distribute, and sell this
+ * software and its documentation for any purpose is hereby granted
+ * without fee, provided that\n the above copyright notice appear in
+ * all copies and that both that copyright notice and this permission
+ * notice appear in supporting documentation, and that the name of
+ * the copyright holders not be used in advertising or publicity
+ * pertaining to distribution of the software without specific,
+ * written prior permission.  The copyright holders make no
+ * representations about the suitability of this software for any
+ * purpose.  It is provided "as is" without express or implied
+ * warranty.
+ * 
+ * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
+ * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
+ * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
+ * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
+ * THIS SOFTWARE.
+ */
+
+#include <stdlib.h>
+#include <stdint.h>
+#include "wayland-util.h"
+
+#define ARRAY_LENGTH(a) (sizeof (a) /sizeof (a)[0])
+
+extern const struct wl_interface wl_buffer_interface;
+extern const struct wl_interface wl_buffer_interface;
+
+static const struct wl_interface *types[] = {
+	NULL,
+	&wl_buffer_interface,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	&wl_buffer_interface,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+	NULL,
+};
+
+static const struct wl_message wl_drm_requests[] = {
+	{ "authenticate", "u", types + 0 },
+	{ "create_buffer", "nuiiuu", types + 1 },
+	{ "create_planar_buffer", "nuiiuiiiiii", types + 7 },
+};
+
+static const struct wl_message wl_drm_events[] = {
+	{ "device", "s", types + 0 },
+	{ "format", "u", types + 0 },
+	{ "authenticated", "", types + 0 },
+};
+
+WL_EXPORT const struct wl_interface wl_drm_interface = {
+	"wl_drm", 1,
+	ARRAY_LENGTH(wl_drm_requests), wl_drm_requests,
+	ARRAY_LENGTH(wl_drm_events), wl_drm_events,
+};
+
